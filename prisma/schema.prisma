// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Material {
  id           Int        @id @default(autoincrement())
  typeMaterial String
  Products     Products[]
}

model Sizes {
  id           Int            @id @default(autoincrement())
  value        String
  ProductSizes ProductSizes[]
}

model ProductSizes {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Products @relation(fields: [productId], references: [id])
  sizeId    Int
  Size      Sizes    @relation(fields: [sizeId], references: [id])
}

model Types {
  id       Int        @id @default(autoincrement())
  typeName String
  Products Products[]
}

model Products {
  id               Int                @id @default(autoincrement())
  name             String
  typeId           Int
  Type             Types              @relation(fields: [typeId], references: [id])
  materialId       Int
  Material         Material           @relation(fields: [materialId], references: [id])
  ProductsInBusket ProductsInBusket[]
  price            String
  OrderItems       OrderItems[]
  ProductSizes ProductSizes[]
}

model Buyers {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  phone   Int
  address String
  price   Int
  Busket  Busket[]
  Order   Orders[]
}

model ProductsInBusket {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  busketId  Int
  Busket    Busket   @relation(fields: [busketId], references: [id])
}

model Busket {
  id               Int                @id @default(autoincrement())
  byerId           Int
  Buyer            Buyers             @relation(fields: [byerId], references: [id])
  open             Boolean
  ProductsInBusket ProductsInBusket[]
}

model Orders {
  id          Int          @id @default(autoincrement())
  byerId      Int
  Buyer       Buyers       @relation(fields: [byerId], references: [id])
  date        DateTime
  totalAmount String
  OrderItems  OrderItems[]
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  OrderId   Orders   @relation(fields: [orderId], references: [id])
  productId Int
  ProductId Products @relation(fields: [productId], references: [id])
  price     String
}

// -----------------------------------------------------------------------------------

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
